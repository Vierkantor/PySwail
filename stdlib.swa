// Make syntax definitions less painful

// makes << <name> >> into a submatch
insert(Parser.value, 0, Parser.rule(
	"value",
	[
		Parser.literalMatch("<<"),
		Parser.subMatch("token"),
		Parser.literalMatch(">>")
	],
	function([`parsed, `text], `{
		Parser.subMatch(parsed."token".name);
	})
));

// makes '<string>' into a literal match
insert(Parser.value, 0, Parser.rule(
	"value",
	[
		Parser.literalMatch("'"),
		<<token>>,
		Parser.literalMatch("'")
	],
	function([`parsed, `text], `{
		Parser.literalMatch(parsed."token");
	})
));

// defines the = operator
set(Parser, `assignment, [Parser.rule(
	"assignment",
	[
		<<token>>, '"="', <<expression>>
	],
	function([`parsed, `text], `{
		call(`def, [literal(parsed."token"), parsed."expression"]);
	})
)]);

insert(Parser.expression, 0, Parser.rule(
	"expression",
	[
		<<assignment>>
	],
	function([`parsed, `text], `{
		parsed."assignment";
	})
));

set(Parser, `params, [
	Parser.rule(
		"params",
		[
			'")"'
		],
		function([`parsed, `text], `{
			[];
		})
	),
	Parser.rule(
		"params",
		[
			<<token>>, '")"'
		],
		function([`parsed, `text], `{
			[literal(parsed."token")];
		})
	),
	Parser.rule(
		"params",
		[
			<<token>>, '","', <<params>>
		],
		function([`parsed, `text], `{
			insert(parsed."params", 0, literal(parsed."token"));
			parsed."params";
		})
	),
]);

// syntax for anonymous function creation
set(Parser, `lambda, [Parser.rule(
	"lambda",
	[
		'"function"', '"("', <<params>>, <<block>>
	],
	function([`parsed, `text], `{
		call(`function, [parsed."params", literal(parsed."block")]);
	})
)]);

insert(Parser.expression, 0, Parser.rule(
	"expression",
	[
		<<lambda>>
	],
	function([`parsed, `text], `{
		parsed."lambda";
	})
));

// syntax for function definition
set(Parser, `functionDef, [Parser.rule(
	"functionDef",
	[
		'"function"', <<token>>, '"("', <<params>>, <<block>>
	],
	function(parsed, text) {
		call(`def, [literal(parsed."token"), call(`function, [parsed."params", literal(parsed."block")])]);
	}
)]);

insert(Parser.statement, 0, Parser.rule(
	"statement",
	[
		<<functionDef>>
	],
	function(parsed, text) {
		parsed."functionDef";
	}
));

